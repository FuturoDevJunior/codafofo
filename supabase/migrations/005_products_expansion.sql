ALTER TABLE PRODUCTS
    ADD COLUMN STOCK INTEGER DEFAULT 0 CHECK (
        STOCK >= 0
    );

ALTER TABLE PRODUCTS
    ADD COLUMN DISCOUNT_PERCENT DECIMAL(
        5,
        2
    ) DEFAULT 0 CHECK (
        DISCOUNT_PERCENT BETWEEN 0 AND 100
    );

ALTER TABLE PRODUCTS
    ADD COLUMN SUPPLIER_ID UUID
        REFERENCES SUPPLIERS(
            ID
        ) ON DELETE SET NULL;

ALTER TABLE PRODUCTS
    ADD COLUMN VIEWS_COUNT INTEGER DEFAULT 0;

ALTER TABLE PRODUCTS
    ADD COLUMN CURRENCY TEXT DEFAULT 'BRL';

CREATE INDEX IDX_PRODUCTS_CATEGORY ON PRODUCTS(CATEGORY);

CREATE INDEX IDX_PRODUCTS_SLUG ON PRODUCTS(SLUG);

CREATE INDEX IDX_PRODUCTS_SUPPLIER ON PRODUCTS(SUPPLIER_ID);

CREATE OR REPLACE FUNCTION GENERATE_SLUG(
) RETURNS TRIGGER AS
    $$     BEGIN IF NEW.SLUG IS NULL OR NEW.SLUG = '' THEN
        NEW.SLUG := LOWER(REGEXP_REPLACE(NEW.NAME, '[^a-z0-9]+', '-', 'g'));
    END IF;

    RETURN NEW;
END;
$$     LANGUAGE PLPGSQL;
CREATE TRIGGER TRG_GENERATE_SLUG BEFORE INSERT OR UPDATE ON PRODUCTS FOR EACH ROW EXECUTE PROCEDURE GENERATE_SLUG(
);
CREATE OR REPLACE

FUNCTION CHECK_STOCK(
) RETURNS TRIGGER AS
    $$     BEGIN IF NEW.STOCK < 0 THEN
        RAISE
    EXCEPTION
        'Estoque nÃ£o pode ser negativo';
    END IF;

    RETURN NEW;
END;
$$     LANGUAGE PLPGSQL;
CREATE TRIGGER TRG_CHECK_STOCK BEFORE UPDATE ON PRODUCTS FOR EACH ROW EXECUTE

PROCEDURE CHECK_STOCK(
);