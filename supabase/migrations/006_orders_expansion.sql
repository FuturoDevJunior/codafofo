ALTER TABLE ORDERS
    ADD COLUMN STATUS TEXT DEFAULT 'pending' CHECK (
        STATUS IN ('pending', 'confirmed', 'shipped', 'cancelled')
    );

ALTER TABLE ORDERS
    ADD COLUMN DISCOUNT_APPLIED DECIMAL(
        10,
        2
    ) DEFAULT 0;

ALTER TABLE ORDERS
    ADD COLUMN NOTES TEXT;

CREATE INDEX IDX_ORDERS_STATUS ON ORDERS(STATUS);

CREATE INDEX IDX_ORDERS_CREATED_AT ON ORDERS(CREATED_AT DESC);

CREATE OR REPLACE FUNCTION CALC_ORDER_DISCOUNT(
) RETURNS TRIGGER AS
    $$     BEGIN NEW.DISCOUNT_APPLIED := (
        SELECT
            COALESCE(SUM((P.PRICE * (I->>'quantity')::INT * (P.DISCOUNT_PERCENT / 100))),
            0)
        FROM
            JSONB_ARRAY_ELEMENTS(NEW.ITEMS) I
            JOIN PRODUCTS P
            ON P.ID = (I->>'id')::UUID
    );
    NEW    .TOTAL := NEW.TOTAL - COALESCE(NEW.DISCOUNT_APPLIED, 0);
    RETURN NEW;
END;
$$     LANGUAGE PLPGSQL;
CREATE TRIGGER TRG_CALC_DISCOUNT BEFORE INSERT ON ORDERS FOR EACH ROW EXECUTE PROCEDURE CALC_ORDER_DISCOUNT(
);
CREATE OR REPLACE

FUNCTION UPDATE_STOCK_ON_ORDER(
) RETURNS TRIGGER AS
    $$     BEGIN FOR ITEM IN
    SELECT
        *
    FROM
        JSONB_ARRAY_ELEMENTS(NEW.ITEMS) LOOP UPDATE PRODUCTS SET STOCK = STOCK - (ITEM->>'quantity')::INT
    WHERE
        ID = (ITEM->>'id')::UUID
        AND STOCK >= (ITEM->>'quantity')::INT;
    IF     NOT FOUND THEN
        RAISE EXCEPTION 'Estoque insuficiente para %', ITEM->>'name';
    END IF;
END LOOP;
RETURN NEW;
END;
$$     LANGUAGE PLPGSQL;
CREATE TRIGGER TRG_UPDATE_STOCK AFTER INSERT ON ORDERS FOR EACH ROW EXECUTE PROCEDURE UPDATE_STOCK_ON_ORDER(
);