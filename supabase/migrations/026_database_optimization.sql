-- Melhorias no Schema do Banco de Dados
-- Migration 026 - Otimizações e melhorias estruturais

-- 1. ADICIONAR CAMPOS FALTANTES NA TABELA PRODUCTS
ALTER TABLE PRODUCTS
    ADD COLUMN IF NOT EXISTS CURRENCY TEXT DEFAULT 'BRL' CHECK (
        CURRENCY IN ('BRL', 'USD', 'EUR')
    ), ADD COLUMN IF NOT EXISTS PRICE_CARD DECIMAL(
        10,
        2
    ), ADD COLUMN IF NOT EXISTS SUPPLIER_ID UUID, ADD COLUMN IF NOT EXISTS STOCK_QUANTITY INTEGER DEFAULT 0, ADD COLUMN IF NOT EXISTS MIN_STOCK_ALERT INTEGER DEFAULT 5, ADD COLUMN IF NOT EXISTS WEIGHT_GRAMS DECIMAL(
        8,
        2
    ), ADD COLUMN IF NOT EXISTS DIMENSIONS_CM TEXT, ADD COLUMN IF NOT EXISTS MANUFACTURER TEXT, ADD COLUMN IF NOT EXISTS LOT_NUMBER TEXT, ADD COLUMN IF NOT EXISTS EXPIRATION_DATE DATE, ADD COLUMN IF NOT EXISTS REQUIRES_PRESCRIPTION BOOLEAN DEFAULT FALSE, ADD COLUMN IF NOT EXISTS TAGS TEXT[] DEFAULT '{}', ADD COLUMN IF NOT EXISTS SEO_DESCRIPTION TEXT, ADD COLUMN IF NOT EXISTS SEO_KEYWORDS TEXT[] DEFAULT '{}', ADD COLUMN IF NOT EXISTS FEATURED BOOLEAN DEFAULT FALSE, ADD COLUMN IF NOT EXISTS DISCOUNT_PERCENTAGE DECIMAL(
        5,
        2
    ) DEFAULT 0, ADD COLUMN IF NOT EXISTS DISCOUNT_VALID_UNTIL TIMESTAMP WITH TIME ZONE, ADD COLUMN IF NOT EXISTS UPDATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP;

-- 2. MELHORAR TABELA ORDERS
ALTER TABLE ORDERS
    ADD COLUMN IF NOT EXISTS STATUS TEXT DEFAULT 'pending' CHECK (
        STATUS IN ('pending', 'confirmed', 'processing', 'shipped', 'delivered', 'cancelled')
    ), ADD COLUMN IF NOT EXISTS PAYMENT_METHOD TEXT CHECK (
        PAYMENT_METHOD IN ('pix', 'credit_card', 'bank_transfer')
    ), ADD COLUMN IF NOT EXISTS PAYMENT_STATUS TEXT DEFAULT 'pending' CHECK (
        PAYMENT_STATUS IN ('pending', 'paid', 'failed', 'refunded')
    ), ADD COLUMN IF NOT EXISTS CUSTOMER_EMAIL TEXT, ADD COLUMN IF NOT EXISTS CUSTOMER_CPF TEXT, ADD COLUMN IF NOT EXISTS SHIPPING_ADDRESS JSONB, ADD COLUMN IF NOT EXISTS BILLING_ADDRESS JSONB, ADD COLUMN IF NOT EXISTS SHIPPING_COST DECIMAL(
        10,
        2
    ) DEFAULT 0, ADD COLUMN IF NOT EXISTS DISCOUNT_AMOUNT DECIMAL(
        10,
        2
    ) DEFAULT 0, ADD COLUMN IF NOT EXISTS SUBTOTAL DECIMAL(
        10,
        2
    ), ADD COLUMN IF NOT EXISTS TAX_AMOUNT DECIMAL(
        10,
        2
    ) DEFAULT 0, ADD COLUMN IF NOT EXISTS NOTES TEXT, ADD COLUMN IF NOT EXISTS TRACKING_CODE TEXT, ADD COLUMN IF NOT EXISTS ESTIMATED_DELIVERY DATE, ADD COLUMN IF NOT EXISTS ACTUAL_DELIVERY_DATE TIMESTAMP WITH TIME ZONE, ADD COLUMN IF NOT EXISTS UPDATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP;

-- 3. CRIAR TABELA DE AUDITORIA
CREATE TABLE IF NOT EXISTS AUDIT_LOGS (
    ID UUID PRIMARY KEY DEFAULT UUID_GENERATE_V4(),
    TABLE_NAME TEXT NOT NULL,
    RECORD_ID UUID,
    ACTION TEXT NOT NULL CHECK (ACTION IN ('INSERT', 'UPDATE', 'DELETE')),
    OLD_VALUES JSONB,
    NEW_VALUES JSONB,
    USER_ID UUID REFERENCES AUTH.USERS(ID),
    IP_ADDRESS INET,
    USER_AGENT TEXT,
    CREATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- 4. CRIAR TABELA DE CONFIGURAÇÕES
CREATE TABLE IF NOT EXISTS APP_CONFIG (
    KEY TEXT PRIMARY KEY,
    VALUE JSONB NOT NULL,
    DESCRIPTION TEXT,
    UPDATED_AT TIMESTAMP WITH TIME ZONE DEFAULT CURRENT_TIMESTAMP
);

-- 5. CRIAR ÍNDICES PARA PERFORMANCE
CREATE INDEX IF NOT EXISTS IDX_PRODUCTS_CATEGORY ON PRODUCTS(CATEGORY);

CREATE INDEX IF NOT EXISTS IDX_PRODUCTS_ACTIVE ON PRODUCTS(ACTIVE);

CREATE INDEX IF NOT EXISTS IDX_PRODUCTS_FEATURED ON PRODUCTS(FEATURED);

CREATE INDEX IF NOT EXISTS IDX_PRODUCTS_PRICE_PIX ON PRODUCTS(PRICE_PIX);

CREATE INDEX IF NOT EXISTS IDX_PRODUCTS_CREATED_AT ON PRODUCTS(CREATED_AT);

CREATE INDEX IF NOT EXISTS IDX_PRODUCTS_SLUG ON PRODUCTS(SLUG);

CREATE INDEX IF NOT EXISTS IDX_PRODUCTS_SUPPLIER ON PRODUCTS(SUPPLIER_ID);

CREATE INDEX IF NOT EXISTS IDX_PRODUCTS_STOCK ON PRODUCTS(STOCK_QUANTITY);

CREATE INDEX IF NOT EXISTS IDX_ORDERS_STATUS ON ORDERS(STATUS);

CREATE INDEX IF NOT EXISTS IDX_ORDERS_PAYMENT_STATUS ON ORDERS(PAYMENT_STATUS);

CREATE INDEX IF NOT EXISTS IDX_ORDERS_CREATED_AT ON ORDERS(CREATED_AT);

CREATE INDEX IF NOT EXISTS IDX_ORDERS_CUSTOMER_PHONE ON ORDERS(CUSTOMER_PHONE);

CREATE INDEX IF NOT EXISTS IDX_ORDERS_CUSTOMER_EMAIL ON ORDERS(CUSTOMER_EMAIL);

CREATE INDEX IF NOT EXISTS IDX_AUDIT_LOGS_TABLE_RECORD ON AUDIT_LOGS(TABLE_NAME, RECORD_ID);

CREATE INDEX IF NOT EXISTS IDX_AUDIT_LOGS_USER_ID ON AUDIT_LOGS(USER_ID);

CREATE INDEX IF NOT EXISTS IDX_AUDIT_LOGS_CREATED_AT ON AUDIT_LOGS(CREATED_AT);

-- 6. CRIAR FUNÇÃO PARA ATUALIZAR UPDATED_AT
CREATE OR REPLACE FUNCTION UPDATE_UPDATED_AT_COLUMN(
) RETURNS TRIGGER AS
    $$      BEGIN NEW.UPDATED_AT = CURRENT_TIMESTAMP;
    RETURN  NEW;
END;
$$      LANGUAGE PLPGSQL;
 
-- 7. CRIAR TRIGGERS PARA UPDATED_AT
CREATE  TRIGGER UPDATE_PRODUCTS_UPDATED_AT BEFORE UPDATE ON PRODUCTS FOR EACH ROW EXECUTE

FUNCTION UPDATE_UPDATED_AT_COLUMN(
);
CREATE  TRIGGER UPDATE_ORDERS_UPDATED_AT BEFORE UPDATE ON ORDERS FOR EACH ROW EXECUTE

FUNCTION UPDATE_UPDATED_AT_COLUMN(
);
 
-- 8. CRIAR TRIGGER PARA AUDITORIA
CREATE  OR REPLACE

FUNCTION AUDIT_TABLE_CHANGES(
) RETURNS TRIGGER AS
    $$      BEGIN IF TG_OP = 'INSERT' THEN
        INSERT INTO AUDIT_LOGS (
            TABLE_NAME,
            RECORD_ID,
            ACTION,
            NEW_VALUES,
            USER_ID
        ) VALUES (
            TG_TABLE_NAME,
            NEW.ID,
            'INSERT',
            TO_JSONB(NEW),
            AUTH.UID()
        );
        RETURN NEW;
    ELSIF TG_OP = 'UPDATE' THEN
        INSERT INTO AUDIT_LOGS (
            TABLE_NAME,
            RECORD_ID,
            ACTION,
            OLD_VALUES,
            NEW_VALUES,
            USER_ID
        ) VALUES (
            TG_TABLE_NAME,
            NEW.ID,
            'UPDATE',
            TO_JSONB(OLD),
            TO_JSONB(NEW),
            AUTH.UID()
        );
        RETURN NEW;
    ELSIF TG_OP = 'DELETE' THEN
        INSERT INTO AUDIT_LOGS (
            TABLE_NAME,
            RECORD_ID,
            ACTION,
            OLD_VALUES,
            USER_ID
        ) VALUES (
            TG_TABLE_NAME,
            OLD.ID,
            'DELETE',
            TO_JSONB(OLD),
            AUTH.UID()
        );
        RETURN OLD;
    END IF;

    RETURN  NULL;
END;
$$      LANGUAGE PLPGSQL;
 
-- 9. APLICAR TRIGGERS DE AUDITORIA
CREATE  TRIGGER AUDIT_PRODUCTS_CHANGES AFTER INSERT OR UPDATE OR DELETE ON PRODUCTS FOR EACH ROW EXECUTE FUNCTION AUDIT_TABLE_CHANGES(
);
CREATE  TRIGGER AUDIT_ORDERS_CHANGES AFTER INSERT OR UPDATE OR DELETE ON ORDERS FOR EACH ROW EXECUTE FUNCTION AUDIT_TABLE_CHANGES(
);
 
-- 10. CRIAR VIEWS ÚTEIS
CREATE  OR REPLACE VIEW PRODUCTS_SUMMARY AS
SELECT
    ID,
    NAME,
    SLUG,
    CATEGORY,
    PRICE_PIX,
    PRICE_PRAZO,
    PRICE_CARD,
    STOCK_QUANTITY,
    ACTIVE,
    FEATURED,
    CREATED_AT,
    CASE
        WHEN STOCK_QUANTITY <= MIN_STOCK_ALERT THEN
            'low_stock'
        WHEN STOCK_QUANTITY = 0 THEN
            'out_of_stock'
        ELSE
            'in_stock'
    END AS STOCK_STATUS
FROM
    PRODUCTS;
CREATE  OR REPLACE VIEW ORDERS_SUMMARY AS
SELECT
    ID,
    CUSTOMER_NAME,
    CUSTOMER_PHONE,
    CUSTOMER_EMAIL,
    STATUS,
    PAYMENT_STATUS,
    TOTAL,
    SUBTOTAL,
    SHIPPING_COST,
    DISCOUNT_AMOUNT,
    CREATED_AT,
    UPDATED_AT
FROM
    ORDERS;
 
-- 11. CRIAR FUNÇÕES ÚTEIS
CREATE  OR REPLACE

FUNCTION GET_LOW_STOCK_PRODUCTS(
) RETURNS TABLE ( ID UUID, NAME TEXT, STOCK_QUANTITY INTEGER, MIN_STOCK_ALERT INTEGER ) AS
    $$      BEGIN RETURN QUERY
    SELECT
        P.ID,
        P.NAME,
        P.STOCK_QUANTITY,
        P.MIN_STOCK_ALERT
    FROM
        PRODUCTS P
    WHERE
        P.STOCK_QUANTITY <= P.MIN_STOCK_ALERT
        AND P.ACTIVE = TRUE;
END;
$$      LANGUAGE PLPGSQL;
CREATE  OR REPLACE

FUNCTION GET_ORDERS_BY_STATUS(
    ORDER_STATUS TEXT
) RETURNS TABLE ( ID UUID, CUSTOMER_NAME TEXT, TOTAL DECIMAL, CREATED_AT TIMESTAMP WITH TIME ZONE ) AS
    $$      BEGIN RETURN QUERY
    SELECT
        O.ID,
        O.CUSTOMER_NAME,
        O.TOTAL,
        O.CREATED_AT
    FROM
        ORDERS O
    WHERE
        O.STATUS = ORDER_STATUS
    ORDER BY
        O.CREATED_AT DESC;
END;
$$      LANGUAGE PLPGSQL;
 
-- 12. INSERIR CONFIGURAÇÕES PADRÃO
INSERT  INTO APP_CONFIG (KEY, VALUE, DESCRIPTION) VALUES ('site_settings', '{"company_name": "Vytalle Estética & Viscosuplementação", "contact_phone": "+55 11 99999-9999", "contact_email": "contato@vytalle.com.br"}', 'Configurações gerais do site'), ('payment_settings', '{"pix_enabled": true, "credit_card_enabled": true, "bank_transfer_enabled": false}', 'Configurações de pagamento'), ('shipping_settings', '{"free_shipping_threshold": 500.00, "default_shipping_cost": 25.00}', 'Configurações de frete'), ('notification_settings', '{"low_stock_alert": true, "order_confirmation": true, "delivery_update": true}', 'Configurações de notificações') ON CONFLICT (KEY) DO NOTHING;
 
-- 13. MELHORAR POLÍTICAS DE SEGURANÇA
DROP    POLICY IF EXISTS "Public read products" ON PRODUCTS;
CREATE POLICY "Public read active products" ON PRODUCTS FOR
SELECT
    USING (ACTIVE = TRUE);
DROP POLICY IF EXISTS "Auth insert products" ON PRODUCTS;
CREATE POLICY "Admin insert products" ON PRODUCTS FOR INSERT WITH CHECK (
    AUTH.ROLE() = 'authenticated' AND EXISTS ( SELECT 1 FROM AUTH.USERS WHERE ID = AUTH.UID() AND RAW_USER_META_DATA->>'role' = 'admin' )
);
DROP POLICY IF EXISTS "Auth update products" ON PRODUCTS;
CREATE POLICY "Admin update products" ON PRODUCTS FOR
UPDATE USING (
    AUTH.ROLE() = 'authenticated' AND EXISTS ( SELECT 1 FROM AUTH.USERS WHERE ID = AUTH.UID() AND RAW_USER_META_DATA->>'role' = 'admin' )
);
DROP POLICY IF EXISTS "Auth delete products" ON PRODUCTS;
CREATE POLICY "Admin delete products" ON PRODUCTS FOR
DELETE USING (AUTH.ROLE() = 'authenticated'
AND EXISTS (
    SELECT
        1
    FROM
        AUTH.USERS
    WHERE
        ID = AUTH.UID()
        AND RAW_USER_META_DATA->>'role' = 'admin'
));
 
-- 14. ADICIONAR COMENTÁRIOS NAS TABELAS
COMMENT ON TABLE PRODUCTS IS 'Tabela de produtos médicos estéticos';
COMMENT ON TABLE ORDERS IS 'Tabela de pedidos dos clientes';
COMMENT ON TABLE AUDIT_LOGS IS 'Tabela de auditoria para rastrear mudanças';
COMMENT ON TABLE APP_CONFIG IS 'Tabela de configurações da aplicação';
 
-- 15. CRIAR CONSTRAINTS ADICIONAIS
ALTER TABLE PRODUCTS
    ADD CONSTRAINT CHECK_POSITIVE_PRICES CHECK (
        PRICE_PIX > 0 AND PRICE_PRAZO > 0
    ), ADD CONSTRAINT CHECK_VALID_DISCOUNT CHECK (
        DISCOUNT_PERCENTAGE >= 0 AND DISCOUNT_PERCENTAGE <= 100
    ), ADD CONSTRAINT CHECK_STOCK_QUANTITIES CHECK (
        STOCK_QUANTITY >= 0 AND MIN_STOCK_ALERT >= 0
    );
    ALTER TABLE ORDERS ADD CONSTRAINT CHECK_POSITIVE_AMOUNTS CHECK (
        TOTAL > 0 AND SUBTOTAL > 0
    ), ADD CONSTRAINT CHECK_VALID_DATES CHECK (
        ESTIMATED_DELIVERY > CREATED_AT::DATE
    );
    ALTER TABLE ORDERS
    ADD CONSTRAINT CHECK_POSITIVE_AMOUNTS CHECK (
        TOTAL > 0 AND SUBTOTAL > 0
    ), ADD CONSTRAINT CHECK_VALID_DATES CHECK (
        ESTIMATED_DELIVERY > CREATED_AT::DATE
    );