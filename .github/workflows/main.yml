name: Vytalle CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      force_deploy:
        description: 'Force deploy even if tests fail'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'
  NODE_ENV: production
  CI: true
  HUSKY: 0

jobs:
  setup:
    name: Setup
    runs-on: ubuntu-latest
    timeout-minutes: 5
    outputs:
      force-deploy: ${{ steps.deploy-check.outputs.force }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Check if force deploy
        id: deploy-check
        run: |
          if [ "${{ github.event.inputs.force_deploy }}" = "true" ]; then
            echo "force=true" >> $GITHUB_OUTPUT
          else
            echo "force=false" >> $GITHUB_OUTPUT
          fi

      - name: Generate cache key
        id: cache-key
        run: |
          echo "key=$(date +%Y%m%d)-${{ github.sha }}" >> $GITHUB_OUTPUT

  dependencies:
    name: Install Dependencies
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: setup
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: |
          HUSKY=0 npm ci --prefer-offline --no-audit --no-fund
          echo "Dependencies installed successfully"

      - name: Install Playwright browsers
        run: |
          npx playwright install --with-deps
          echo "Playwright browsers installed"

      - name: Verify installations
        run: |
          echo "Node version: $(node --version)"
          echo "NPM version: $(npm --version)"
          echo "Playwright version: $(npx playwright --version)"
          echo "Lighthouse available: $(command -v lighthouse || echo 'Not installed')"

  quality-check:
    name: Quality Check
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: dependencies
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: HUSKY=0 npm ci --prefer-offline

      - name: Run linting
        run: npm run lint

      - name: Run type checking
        run: npm run type-check

      - name: Security audit
        run: |
          npm audit --audit-level=moderate || echo "Security audit completed with warnings"

  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: dependencies
    strategy:
      fail-fast: false
      matrix:
        node-version: ['18.x', '20.x']
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'npm'

      - name: Install dependencies
        run: HUSKY=0 npm ci --prefer-offline

      - name: Run unit tests
        run: npm run test:ci

      - name: Upload coverage reports
        if: matrix.node-version == '20.x'
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports-${{ matrix.node-version }}-${{ github.sha }}
          path: coverage/
          retention-days: 30
          if-no-files-found: ignore

  build:
    name: Build Application
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [dependencies, quality-check]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: HUSKY=0 npm ci --prefer-offline

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts-${{ github.sha }}
          path: .next/
          retention-days: 7
          if-no-files-found: ignore

  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [dependencies, build]
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: HUSKY=0 npm ci --prefer-offline

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run E2E tests
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true

      - name: Upload E2E results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: e2e-results-${{ matrix.browser }}-${{ github.sha }}
          path: playwright-report/
          if-no-files-found: ignore
          retention-days: 7

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [dependencies, build]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: HUSKY=0 npm ci --prefer-offline

      - name: Install Lighthouse
        run: npm install -g lighthouse

      - name: Start application for testing
        run: |
          npm run build
          npm start &
          sleep 30

      - name: Run Lighthouse performance test
        run: |
          lighthouse http://localhost:3000 \
            --output=json \
            --output-path=lighthouse-performance-${{ github.sha }}.json \
            --chrome-flags="--headless --no-sandbox --disable-gpu" \
            --only-categories=performance

      - name: Run Lighthouse HTML report
        run: |
          lighthouse http://localhost:3000 \
            --output=html \
            --output-path=lighthouse-report-${{ github.sha }}.html \
            --chrome-flags="--headless --no-sandbox --disable-gpu" \
            --only-categories=performance

      - name: Upload performance reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: performance-reports-${{ github.sha }}
          path: |
            lighthouse-performance-${{ github.sha }}.json
            lighthouse-report-${{ github.sha }}.html
          if-no-files-found: ignore
          retention-days: 30

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    timeout-minutes: 15
    needs: [build, e2e-tests, performance-tests]
    if: github.ref == 'refs/heads/main' && (needs.e2e-tests.result == 'success' || needs.e2e-tests.result == 'skipped') && (needs.performance-tests.result == 'success' || needs.performance-tests.result == 'skipped')
    environment: staging
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: HUSKY=0 npm ci --prefer-offline

      - name: Deploy to Vercel
        run: |
          npx vercel --prod --yes --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      - name: Health check
        run: |
          echo "Waiting for deployment to be ready..."
          sleep 30
          curl -f https://vytalle-estetica.vercel.app/api/health || echo "Health check failed - continuing anyway"

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    timeout-minutes: 20
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' && needs.deploy-staging.result == 'success'
    environment: production
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: HUSKY=0 npm ci --prefer-offline

      - name: Deploy to Vercel Production
        run: |
          npx vercel --prod --yes --token=${{ secrets.VERCEL_TOKEN }}
        env:
          VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
          VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}

      - name: Health check
        run: |
          echo "Waiting for production deployment to be ready..."
          sleep 45
          for i in {1..5}; do
            if curl -f https://vytalle-estetica.vercel.app/api/health; then
              echo "Health check passed on attempt $i"
              break
            else
              echo "Health check failed on attempt $i, retrying..."
              sleep 30
            fi
          done

  notify:
    name: Notifications & Reports
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: [unit-tests, e2e-tests, performance-tests, deploy-staging, deploy-production]
    if: always()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Generate comprehensive report
        run: |
          echo "# Vytalle CI/CD Pipeline Report" > pipeline-report-${{ github.sha }}.md
          echo "## Summary" >> pipeline-report-${{ github.sha }}.md
          echo "- **Commit**: ${{ github.sha }}" >> pipeline-report-${{ github.sha }}.md
          echo "- **Branch**: ${{ github.ref_name }}" >> pipeline-report-${{ github.sha }}.md
          echo "- **Triggered by**: ${{ github.event_name }}" >> pipeline-report-${{ github.sha }}.md
          echo "- **Timestamp**: $(date -u)" >> pipeline-report-${{ github.sha }}.md
          echo "" >> pipeline-report-${{ github.sha }}.md
          echo "## Job Results" >> pipeline-report-${{ github.sha }}.md
          echo "- **Unit Tests**: ${{ needs.unit-tests.result }}" >> pipeline-report-${{ github.sha }}.md
          echo "- **E2E Tests**: ${{ needs.e2e-tests.result }}" >> pipeline-report-${{ github.sha }}.md
          echo "- **Performance Tests**: ${{ needs.performance-tests.result }}" >> pipeline-report-${{ github.sha }}.md
          echo "- **Deploy Staging**: ${{ needs.deploy-staging.result }}" >> pipeline-report-${{ github.sha }}.md
          echo "- **Deploy Production**: ${{ needs.deploy-production.result }}" >> pipeline-report-${{ github.sha }}.md
          echo "" >> pipeline-report-${{ github.sha }}.md
          echo "## Status" >> pipeline-report-${{ github.sha }}.md
          if [ "${{ needs.unit-tests.result }}" = "success" ] && [ "${{ needs.e2e-tests.result }}" = "success" ] && [ "${{ needs.performance-tests.result }}" = "success" ]; then
            echo "✅ **All tests passed successfully**" >> pipeline-report-${{ github.sha }}.md
          else
            echo "❌ **Some tests failed**" >> pipeline-report-${{ github.sha }}.md
          fi

      - name: Upload pipeline report
        uses: actions/upload-artifact@v4
        with:
          name: pipeline-report-${{ github.sha }}
          path: pipeline-report-${{ github.sha }}.md
          retention-days: 30

      - name: Success notification
        if: success()
        run: |
          echo "🎉 Pipeline completed successfully!"
          echo "All tests passed and deployment completed."

      - name: Failure notification
        if: failure()
        run: |
          echo "❌ Pipeline failed!"
          echo "Check the logs for details on what went wrong." 