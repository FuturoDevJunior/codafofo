name: 📦 Release & Changelog

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version_type:
        description: 'Version bump type'
        required: true
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: 'Create pre-release'
        required: false
        default: false
        type: boolean

env:
  NODE_VERSION: '20.x'

jobs:
  validate-release:
    name: 🔍 Validate Release
    runs-on: ubuntu-latest
    timeout-minutes: 5
    
    outputs:
      current-version: ${{ steps.version.outputs.current-version }}
      new-version: ${{ steps.version.outputs.new-version }}
      changelog: ${{ steps.changelog.outputs.changelog }}
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 📋 Get version info
        id: version
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            # Calculate new version for manual releases
            case "${{ github.event.inputs.version_type }}" in
              "major") NEW_VERSION=$(npm version major --no-git-tag-version | sed 's/v//') ;;
              "minor") NEW_VERSION=$(npm version minor --no-git-tag-version | sed 's/v//') ;;
              "patch") NEW_VERSION=$(npm version patch --no-git-tag-version | sed 's/v//') ;;
            esac
            echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          else
            # Extract version from tag
            NEW_VERSION=${GITHUB_REF#refs/tags/v}
            echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT
          fi

      - name: 📝 Generate changelog
        id: changelog
        run: |
          # Install conventional-changelog-cli if not present
          if ! command -v conventional-changelog &> /dev/null; then
            npm install -g conventional-changelog-cli
          fi
          
          # Generate changelog
          CHANGELOG=$(conventional-changelog -p angular -r 2 | head -n 50)
          echo "changelog<<EOF" >> $GITHUB_OUTPUT
          echo "$CHANGELOG" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

  create-release:
    name: 🚀 Create Release
    runs-on: ubuntu-latest
    timeout-minutes: 10
    needs: validate-release
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install dependencies
        run: npm ci --prefer-offline --no-audit

      - name: 🏗️ Build for release
        run: npm run build

      - name: 📦 Create release package
        run: |
          mkdir -p release-assets
          tar -czf release-assets/vytalle-catalog-v${{ needs.validate-release.outputs.new-version }}.tar.gz \
            --exclude=node_modules \
            --exclude=.git \
            --exclude=.github \
            --exclude=coverage \
            --exclude=.next/cache \
            .

      - name: 📋 Create release notes
        run: |
          cat > release-notes.md << 'EOF'
          ## 🚀 Vytalle Catalog v${{ needs.validate-release.outputs.new-version }}
          
          ### 📈 What's Changed
          ${{ needs.validate-release.outputs.changelog }}
          
          ### 🛠️ Installation
          ```bash
          # Clone the repository
          git clone https://github.com/${{ github.repository }}.git
          cd $(basename ${{ github.repository }})
          
          # Install dependencies
          npm install
          
          # Start development server
          npm run dev
          ```
          
          ### 📦 Assets
          - **Source Code**: Download the source code archive
          - **Release Package**: Pre-built application package
          
          ### 🔗 Links
          - **Demo**: [Live Demo](https://vytalle-catalog.vercel.app) *(if available)*
          - **Documentation**: [README.md](https://github.com/${{ github.repository }}/blob/main/README.md)
          - **Issues**: [Report a Bug](https://github.com/${{ github.repository }}/issues/new)
          
          ---
          **Full Changelog**: https://github.com/${{ github.repository }}/compare/v${{ needs.validate-release.outputs.current-version }}...v${{ needs.validate-release.outputs.new-version }}
          EOF

      - name: 🚀 Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ needs.validate-release.outputs.new-version }}
          name: 🚀 Vytalle Catalog v${{ needs.validate-release.outputs.new-version }}
          body_path: release-notes.md
          files: |
            release-assets/*.tar.gz
          draft: false
          prerelease: ${{ github.event.inputs.prerelease == 'true' }}
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  update-changelog:
    name: 📝 Update Changelog
    runs-on: ubuntu-latest
    timeout-minutes: 5
    needs: [validate-release, create-release]
    if: github.event_name == 'workflow_dispatch'
    
    steps:
      - name: 📥 Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 🔧 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 📝 Update CHANGELOG.md
        run: |
          # Install conventional-changelog-cli
          npm install -g conventional-changelog-cli
          
          # Generate full changelog
          conventional-changelog -p angular -i CHANGELOG.md -s -r 0
          
          # Update package.json version
          npm version ${{ needs.validate-release.outputs.new-version }} --no-git-tag-version

      - name: 💾 Commit changes
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add CHANGELOG.md package.json package-lock.json
          git commit -m "chore(release): v${{ needs.validate-release.outputs.new-version }} [skip ci]" || echo "No changes to commit"

      - name: 🏷️ Create and push tag
        run: |
          git tag v${{ needs.validate-release.outputs.new-version }}
          git push origin main --tags

  post-release:
    name: 📢 Post-release Actions
    runs-on: ubuntu-latest
    needs: [validate-release, create-release]
    if: always() && needs.create-release.result == 'success'
    
    steps:
      - name: 🎉 Release successful
        run: |
          echo "🎉 Release v${{ needs.validate-release.outputs.new-version }} created successfully!"
          echo "🔗 https://github.com/${{ github.repository }}/releases/tag/v${{ needs.validate-release.outputs.new-version }}"